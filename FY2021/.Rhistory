t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
# Tidy data new function -------------------------------------------------
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
# Note: this could be done with purr's map, as well
tidy_grnbook_supps_table <- function(t){
# Deprecated: Remove 5 rows at top of each sheet using read_excel 'skip' argument
# t <- (t[-1:-5,])
#t <- t[[1]]
# Create Missing Colnames
t[1, 1:3] <- c("Military.Department", "FY", "Account")
# Set all Colnames and remove extra row (there ought to be a function that does this)
colnames(t) <- t[1,]
t <- t[-1,]
# Make all colnames r-friendly
colnames(t) <- make.names(colnames(t))
# Select (don't omit!) Columns to use
t <- t[, c(1:3, 5:11)]
# Forward Fill for first two columns (Military Dept, and FY)
t[1,2] <- t[2,2] #< Modified in FY2020 ***
t[,c(1:2)] <- na.locf(t[,c('Military.Department', 'FY')])
# DANGER! Remove rows that contain a NA in the Public Law Title column
t <- t[complete.cases(t$Account),]
# Remove non-alphabetic characters from Public.Law.Title column numbers and periods
#t$footnote <- str_extract("[0-9.] +", t$Account)
t$Account <- str_trim(gsub("[0-9.]+", "", t$Account))
# Remove 'continued' from Military Department
t$Military.Department <- str_trim(gsub("(Continued)", "", t$Military.Department, fixed = "True"))
# Convert relevant cols to numeric
t$FY <- as.numeric(gsub("FY ", "", t$FY))
# Gather and Tidy
t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
# Tidy data new function -------------------------------------------------
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
# Note: this could be done with purr's map, as well
tidy_grnbook_supps_table <- function(t){
# Deprecated: Remove 5 rows at top of each sheet using read_excel 'skip' argument
# t <- (t[-1:-5,])
#t <- t[[1]]
# Create Missing Colnames
t[1, 1:3] <- c("Military.Department", "FY", "Account")
# Set all Colnames and remove extra row (there ought to be a function that does this)
colnames(t) <- t[1,]
t <- t[-1,]
# Make all colnames r-friendly
colnames(t) <- make.names(colnames(t))
# Select (don't omit!) Columns to use
t <- t[, c(1:3, 5:11)]
# Forward Fill for first two columns (Military Dept, and FY)
t[1,2] <- t[2,2] #< Modified in FY2020 ***
t[,c(1:2)] <- na.locf(t[,c('Military.Department', 'FY')])
# DANGER! Remove rows that contain a NA in the Public Law Title column
t <- t[complete.cases(t$Account),]
# Remove non-alphabetic characters from Public.Law.Title column numbers and periods
#t$footnote <- str_extract("[0-9.] +", t$Account)
t$Account <- str_trim(gsub("[0-9.]+", "", t$Account))
# Remove 'continued' from Military Department
t$Military.Department <- str_trim(gsub("(Continued)", "", t$Military.Department, fixed = "True"))
# Convert relevant cols to numeric
t$FY <- as.numeric(gsub("FY ", "", t$FY))
# Gather and Tidy
t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
# Tidy data new function -------------------------------------------------
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
# Note: this could be done with purr's map, as well
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#'
#' Table 2.1 Base Budget, War Funding and Supplementals by Military Department, by P.L. Title
#' (Discretionary Budget Authority)
#'
#' Updated: 05-01-2020 fo FY2021
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(readxl)
library(zoo)
# Preliminaries -----------------------------------------------------------
# Set working dir manually
# Download new raw data?
download.switch <- "download.switch.on"
download.switch <- "download.switch.off"
# Import  Data from Website------------------------------------------------------------
x <- "https://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2021/FY_2021_Green_Book.zip"
y <- "FY21 PB Green Book Chap 2.xlsx"
nettle_downzip <- function(zip.url, zip.file){
my.temporary.zipped.file <- tempfile()   # Zip file will go in here
my.temporarary.zipped.folder <- tempdir() # Unzipped file will go in here
download.file(zip.url, dest = my.temporary.zipped.file) # Download Source Data to Temp file
unzip(my.temporary.zipped.file, exdir = my.temporarary.zipped.folder) # Unzip to Temp directory
location.of.unzipped.file <- paste0(my.temporarary.zipped.folder,"/", zip.file)
return(location.of.unzipped.file )
}
my.filename <- nettle_downzip(x,y)
#excel_sheets(my.filename)
# Reshape -----------------------------------------------------------------
#Import  There are 18 sheet
t <-  lapply(excel_sheets(my.filename)[1:18],
read_excel,
path = my.filename,
col_names = F,
skip = 5 )
#' User Defined Cleaning Function ---------------------------------------------------
#' Purpose:Create function that cleans and tidies
#' Note: Rather than removing cols, SELECT them by colname. Sometimes, one sheet will
#' have extra blank cols not included on others that widens orlengthens the array.
tidy_grnbook_supps_table <- function(t){
# Deprecated: Remove 5 rows at top of each sheet using read_excel 'skip' argument
# t <- (t[-1:-5,])
#t <- t[[1]]
# Create Missing Colnames
t[1, 1:3] <- c("Military.Department", "FY", "Account")
# Set all Colnames and remove extra row (there ought to be a function that does this)
colnames(t) <- t[1,]
t <- t[-1,]
# Make all colnames r-friendly
colnames(t) <- make.names(colnames(t))
# Select (don't omit!) Columns to use
t <- t[, c(1:3, 5:11)]
# Forward Fill for first two columns (Military Dept, and FY)
t[1,2] <- t[2,2] #< Modified in FY2020 ***
t[,c(1:2)] <- na.locf(t[,c('Military.Department', 'FY')])
# DANGER! Remove rows that contain a NA in the Public Law Title column
t <- t[complete.cases(t$Account),]
# Remove non-alphabetic characters from Public.Law.Title column numbers and periods
#t$footnote <- str_extract("[0-9.] +", t$Account)
t$Account <- str_trim(gsub("[0-9.]+", "", t$Account))
# Remove 'continued' from Military Department
t$Military.Department <- str_trim(gsub("(Continued)", "", t$Military.Department, fixed = "True"))
# Convert relevant cols to numeric
t$FY <- as.numeric(gsub("FY ", "", t$FY))
# Gather and Tidy
t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
t
names(t)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#'
#' Table 2.1 Base Budget, War Funding and Supplementals by Military Department, by P.L. Title
#' (Discretionary Budget Authority)
#'
#' Updated: 05-01-2020 fo FY2021
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(readxl)
library(zoo)
# Preliminaries -----------------------------------------------------------
# Set working dir manually
# Download new raw data?
download.switch <- "download.switch.on"
download.switch <- "download.switch.off"
# Import  Data from Website------------------------------------------------------------
x <- "https://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2021/FY_2021_Green_Book.zip"
y <- "FY21 PB Green Book Chap 2.xlsx"
nettle_downzip <- function(zip.url, zip.file){
my.temporary.zipped.file <- tempfile()   # Zip file will go in here
my.temporarary.zipped.folder <- tempdir() # Unzipped file will go in here
download.file(zip.url, dest = my.temporary.zipped.file) # Download Source Data to Temp file
unzip(my.temporary.zipped.file, exdir = my.temporarary.zipped.folder) # Unzip to Temp directory
location.of.unzipped.file <- paste0(my.temporarary.zipped.folder,"/", zip.file)
return(location.of.unzipped.file )
}
my.filename <- nettle_downzip(x,y)
#excel_sheets(my.filename)
# Reshape -----------------------------------------------------------------
#Import  There are 18 sheet
t <-  lapply(excel_sheets(my.filename)[1:18],
read_excel,
path = my.filename,
col_names = F,
skip = 5 )
t
t[1]
t[[1]] %>% View()
t[[5]] %>% View()
# Header ------------------------------------------------------------------
#' Compile SF133, an OMB Budget execution report
#' Excel files for Department of Defense-Military
#'
#' XML data is monthly, unlike excel docs, however,
#' XML colnames different.
# Libraries -------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
library(rpivotTable)
library(feather)
library(janitor)
# Functions and Common Vars -----------------------------------------------
iferror <- function(expr, error_expr){
tryCatch(expr, error=function(e){error_expr})
}
# How to Update this file -------------------------------------------------
# Step 1
current.fy <- "2019"
# Import ------------------------------------------------------------------
#' 1. Create a tibble
#' 2. read data to tibble:  (downloading directly with read_excel is not currently possible)
#' 3. unnest
# 1. Create tibble
xml.tibble.1 <- tibble(
report.FY = 2014:current.fy,
my.filename = paste0("./Data/Raw/xml/", 2014:current.fy, ".xlsx")
)
xml.tibble.1
# 2. Read files to tibble
xml.tibble.2  <- xml.tibble.1  %>%
mutate(my.data = map(my.filename, ~(.x %>%
read_excel(sheet="Raw", col_types="text") ) ) )
getwd()
# Header ------------------------------------------------------------------
#' Compile SF133, an OMB Budget execution report
#' Excel files for Department of Defense-Military
# Libraries -------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
library(rpivotTable)
library(feather)
# Functions and Common Vars -----------------------------------------------
iferror <- function(expr, error_expr){
tryCatch(expr, error=function(e){error_expr})
}
# How to Update this file -------------------------------------------------
# Step 1
current.fy <- "2018"
#Step 2
# manual; paste new hyperlink in sf.tibble, below. Unfortunately, no predictable pattern.
# Import ------------------------------------------------------------------
#' 1. Create a tibble with hyperlinks
#' 2. Download data to tibble:  (downloading directly with read_excel is not currently possible)
#' 3. unnest
# 1. Create tibble
sf.tibble <- tibble(
report.FY = c(2013:current.fy),
my.filename = paste0("./Data/Raw/excel/", report.FY, ".xlsx"),
hyperlink = c("https://portal.max.gov/portal/document/SF133/Budget/attachments/646122715/660638471.xlsx",     #FY2013
"https://portal.max.gov/portal/document/SF133/Budget/attachments/703038966/737052130.xlsx",     #FY2014
"https://portal.max.gov/portal/document/SF133/Budget/attachments/781353958/783221158.xlsx",     #FY2015
"https://portal.max.gov/portal/document/SF133/Budget/attachments/984121454/984056306.xlsx",     #FY2016
"https://portal.max.gov/portal/document/SF133/Budget/attachments/1186759944/1187284005.xlsx",   #FY2017
"https://portal.max.gov/portal/document/SF133/Budget/attachments/1375242472/1516309877.xlsx"    #FY2018
#< new hyperlink goes here #
))
# 2.  Download and Read **********************
# Download Excel Files to Raw folder
my.download.function <- function(my.url,my.download.filename){
download.file(my.url, my.download.filename, mode = "wb")}
Map(my.download.function, sf.tibble$hyperlink, sf.tibble$my.filename)
# Read files to tibble
sf.tibble.2 <- sf.tibble %>%
mutate(my.data = map(my.filename, ~(.x %>%
read_excel(sheet="Raw Data", col_types="text") ) ) )
# Header ------------------------------------------------------------------
#' Compile SF133, an OMB Budget execution report
#' Excel files for Department of Defense-Military
# Libraries -------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
library(rpivotTable)
library(feather)
# Functions and Common Vars -----------------------------------------------
iferror <- function(expr, error_expr){
tryCatch(expr, error=function(e){error_expr})
}
# How to Update this file -------------------------------------------------
# Step 1
current.fy <- "2018"
#Step 2
# manual; paste new hyperlink in sf.tibble, below. Unfortunately, no predictable pattern.
# Import ------------------------------------------------------------------
#' 1. Create a tibble with hyperlinks
#' 2. Download data to tibble:  (downloading directly with read_excel is not currently possible)
#' 3. unnest
# 1. Create tibble
sf.tibble <- tibble(
report.FY = c(2013:current.fy),
my.filename = paste0("./Data/Raw/excel/", report.FY, ".xlsx"),
hyperlink = c("https://portal.max.gov/portal/document/SF133/Budget/attachments/646122715/660638471.xlsx",     #FY2013
"https://portal.max.gov/portal/document/SF133/Budget/attachments/703038966/737052130.xlsx",     #FY2014
"https://portal.max.gov/portal/document/SF133/Budget/attachments/781353958/783221158.xlsx",     #FY2015
"https://portal.max.gov/portal/document/SF133/Budget/attachments/984121454/984056306.xlsx",     #FY2016
"https://portal.max.gov/portal/document/SF133/Budget/attachments/1186759944/1187284005.xlsx",   #FY2017
"https://portal.max.gov/portal/document/SF133/Budget/attachments/1375242472/1516309877.xlsx"    #FY2018
#< new hyperlink goes here #
))
# Read files to tibble
sf.tibble.2 <- sf.tibble %>%
mutate(my.data = map(my.filename, ~(.x %>%
read_excel(sheet="Raw Data", col_types="text") ) ) )
# Read files to tibble
sf.tibble.2 <- sf.tibble %>%
mutate(my.data = map(my.filename, ~(.x %>%
read_excel(sheet="Raw Data", col_types="text") ) ) )
getwd()
#' Public Law Title from 1948
#' Includes discretionary and mandatory
#'
#' 6.01 TOA
#' 6.08 BA
#' 6.11 Outlays
#'
#' # How to Update this File -------------------------------------------------
#' #-#-#-#-#-#-# THIS WILL PROBABLY NOT CHANGE #-#-#-#-#-#-#-#-#-#-#-#-#-#
#'
#'   Download Comptroller data to Raw folder (manually).
#'
#'   Set working Directory to current year:
setwd("./DOD-Green-Book/FY2021")
#'
#'   Chapter 6 raw data folder, files
chapter.6.raw.data.folder <- "./Data/Raw/FY21 PB Green Book Chap 6/"
#'
#'  Identify rows for constant and current
row.range <- c( 7:16,    #<- Current
19:28)    #<- Constant
row.names <-  rep(c( "military.personnel",
"retired.pay.Defense",
"OM",
"procurement",
"RDTE",
"MILCON",
"family.housing",
"revolving.and.management.funds",
"trust.receipts.and.other",
"OCO.placeholder"
), 2)
#' name of first column
first.col.name <- "public.law.title"
#'  Preferred Export filename
export.filename <- "1_Public.Law.since.1948_BA.Outlays.TOA"
#' #-#-#-#-#-#-# Indvidual File Info May Change #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#'       Update Name of specific files
my.filename.1 <- "FY21 PB Green Book Table 6-1.xlsx" #<--  TOA by public law
my.filename.2 <- "FY21 PB Green Book Table 6-8.xlsx" #<--  BA by public law
my.filename.3 <- "FY21 PB Green Book Table 6-11.xlsx" #<-- Outlays by public law
#'       Update Name of specific files
budget.type.1        <-     "TOA"
budget.type.2        <-     "BA"
budget.type.3        <-     "Outlays"
#'       Update Name of specific files
source.table.1       <-     "tbl.6.01.TOA.by.Public.Law"
source.table.2       <-     "tbl.6.08.BA.by.Public.Law"
source.table.3       <-     "tbl.6.11.Outlays.by.Public.Law"
# Libraries ---------------------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
# Superfunction -----------------------------------------------------------
clean.function <- function(
my.filename,      #<- changes
source.table,     #<- changes
budget.type,      #<- changes
intro.col.name = first.col.name,
folder = chapter.6.raw.data.folder,
valid.row.range = row.range,
valid.row.names = row.names) {
# Import -------------------------------------------------------------
# construct filename
import.file.name <- paste0(chapter.6.raw.data.folder,
my.filename)
#Import
df.1 <- read_excel(import.file.name, col_names=F)
# Reshaping ---------------------------------------------------------------
#Basic Shaping: Only valid Row, cols
df.1 <- df.1[valid.row.range,c(-2:-3)]
# FY Colnames (based on size of dataset--brittle)
FY.colnames <- str_c(1948:(1948+(ncol(df.1)-2) )) #<FY must be text (for tidy)
colnames(df.1) <- c(intro.col.name,     #<First colname
FY.colnames)
# Rename left col (header rows)
df.1[,1] <- valid.row.names
# NAs to zeros
df.1[is.na(df.1)] <- 0
#Add meta cols-#-#-#-#-#-#-#--#-#-#--#-#-#-
#new identifying cols
df.1$source.table       <-     source.table
df.1$budget.type        <-     budget.type
#Current/Constant
# Divide nrows in two; tag first half as "current", and second "constant"
repeat.deflator.type.times <- nrow(df.1)/2
repeat.deflator.type <- c( rep("current", repeat.deflator.type.times),
rep("constant", repeat.deflator.type.times) )
df.1$deflator.type <-repeat.deflator.type
#Rearrange
df.1 <- df.1 %>%
select(
source.table,
budget.type,
deflator.type,
1,
everything() )
#Tidy and formatting-#-#-#-#-#-#-#--#-#-#--#-#-#-
#Gather
df.2 <- df.1 %>%
gather(FY, amount, -1:-4)
#adjust numbers
df.2$amount <- as.numeric(df.2$amount)*1e6
final.df <- df.2
return(final.df)
}
# Export as .csv -----------------------------------------------------
combined <- bind_rows(
#tbl 6-2 TOA
clean.function(my.filename  = my.filename.1,
source.table = source.table.1,
budget.type  = budget.type.1),
#tbl 6-9 BA
clean.function(my.filename  = my.filename.2,
source.table = source.table.2,
budget.type  = budget.type.2),
#tbl 6-12 Outlays
clean.function(my.filename  = my.filename.3,
source.table = source.table.3,
budget.type  = budget.type.3)
)
combined
combined %>% distinct(public.law.title)
