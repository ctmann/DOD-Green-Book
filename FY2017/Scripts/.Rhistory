library(readr)
library(zoo)
# Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 PB Green Book Chap 2.xlsx"
#Import  There are 15 sheets but only the first 14 have data. The last is for notes.
t <-  lapply(excel_sheets(filename)[1:14], read_excel, path = filename, col_names = F, skip = 5 )
#' User Defined Cleaning Function ---------------------------------------------------
#' Purpose:Create function that cleans and tidies
#' Note: Rather than removing cols, SELECT them by colname. Sometimes, one sheet will
#' have extra blank cols not included on others that widens orlengthens the array.
tidy_grnbook_supps_table <- function(t){
# Deprecated: Remove 5 rows at top of each sheet using read_excel 'skip' argument
# t <- (t[-1:-5,])
# Create Missing Colnames
t[1, 1:3] <- c("Military.Department", "FY", "Account")
# Set all Colnames and remove extra row (there ought to be a function that does this)
colnames(t) <- t[1,]
t <- t[-1,]
# Make all colnames r-friendly
colnames(t) <- make.names(colnames(t))
# Select (don't omit!) Columns to use
t <- t[, c(1:3, 5:11)]
# Forward Fill for first two columns (Military Dept, and FY)
t[,c('Military.Department', 'FY')] <- na.locf(t[,c('Military.Department', 'FY')])
# DANGER! Remove rows that contain a NA in the Public Law Title column
t <- t[complete.cases(t$Account),]
# Remove non-alphabetic characters from Public.Law.Title column numbers and periods
t$Account <- str_trim(gsub("[0-9.]+", "", t$Account))
# Remove 'continued' from Military Department
t$Military.Department <- str_trim(gsub("(Continued)", "", t$Military.Department, fixed = "True"))
# Convert relevant cols to numeric
t$FY <- as.numeric(gsub("FY ", "", t$FY))
# Gather and Tidy
t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
# Tidy data new function -------------------------------------------------
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
# Note: this could be done with purr's map, as well
# Add MetaData ------------------------------------------------------------
# Add Spending type column I've devised (base, OCO, emergency relief, other)
# Create variables
unique.public.laws <- unique(t$Account)
base <- unique.public.laws[1]
OCO.GWOT <- unique.public.laws[c(2,8)]
emergency.relief <- unique.public.laws[c(4,5,6,9,10,12)]
other <- unique.public.laws[c(3,7,11)]
# Assign vars to column
t <- t %>%
mutate(spending.type = ifelse(t$Account %in% base, "Base, Discretionary",
ifelse(t$Account %in% OCO.GWOT, "OCO.GWOT",
ifelse(t$Account %in% emergency.relief, "Emergency Relief",
ifelse(t$Account %in% other, "Other Discretionary", "uncategorized")))))
# Include Source Column
t$Source_Data <- "FY17 Green Book, tbl 2.1"
# Export ------------------------------------------------------------------
# Export as .csv
# Filename
mylocation <- "../Data/Processed"
myfilename <- "tbl2.1_Base.and.Supps"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
# View(t)
write_csv(t, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' #' Table 5-6: DoD dod.deflators Budget Authority by Public Law
#' Title (FY 1970 to FY 2021)
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(zoo)
library(stringr)
library(readr)
library(ggplot2)
#' # Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "/Data/Raw/FY17 PB Green Book Chap 5.xlsx"
filename <- paste0(getwd(), filename)
# Examine file
excel_sheets(filename)[6]
# Import tbl 5-5 on sheet 6 of workbook
dod.deflator <- tbl_df(read_excel(path = filename, sheet = 6, skip = 4))
# Make all colnames r-friendly
colnames(dod.deflator) <- make.names(colnames(dod.deflator))
library(tidyr)
library(dplyr)
library(readxl)
library(zoo)
library(stringr)
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(readxl)
library(zoo)
library(stringr)
library(readr)
library(ggplot2)
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 PB Green Book Chap 5.xlsx"
filename <- paste0(getwd(), filename)
# Examine file
excel_sheets(filename)[6]
excel_sheets(filename)[6]
getwd()
filename <- "../Data/Raw/FY17 PB Green Book Chap 5.xlsx"
# Examine file
excel_sheets(filename)[6]
filename <- "../Data/Raw/FY17 PB Green Book Chap 5.xlsx"
# Examine file
#excel_sheets(filename)[6]
# Import tbl 5-5 on sheet 6 of workbook
dod.deflator <- tbl_df(read_excel(path = filename, sheet = 6, skip = 4))
# Make all colnames r-friendly
colnames(dod.deflator) <- make.names(colnames(dod.deflator))
# Add Columns -------------------------------------------------------------
# Change FY column name
colnames(dod.deflator)[1] <- "FY"
# New Column: dod.deflator Name
dod.deflator$Source <- names(read_excel(path = filename, sheet = 6))[1]
# New Column: dod.deflator Base Year
dod.deflator$Base.FY <- 2017
# Clean and Tidy -------------------------------------------------------------------
# Remove dots from FY column and convert to numeric
dod.deflator$FY <- as.numeric(str_trim(gsub("[.]+", "", dod.deflator$FY)))
# Tidy
dod.deflator <- dod.deflator %>%
gather(key = Public.Law.Title, dod.deflator.Value, -FY, -Source, -Base.FY)
mylocation <- "./Data/Processed"
myfilename <- "tbl_5.6_dod.deflators.BA.by.Public.Law"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
write_csv(dod.deflator, my.file)
mylocation <- "../Data/Processed"
myfilename <- "tbl_5.6_dod.deflators.BA.by.Public.Law"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
write_csv(dod.deflator, my.file)
mylocation <- "../Data/Processed"
myfilename <- "tbl_5.6_DOD.Deflators.BA.by.Public.Law"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
write_csv(dod.deflator, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' Table 6.8 DOD BA By Title
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
# Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "/Data/Raw/FY17 6-8_DoD BA by Title.xlsx"
filename <- paste0(getwd(), filename)
#excel_sheets(filename)
df.raw <- read_excel(filename, skip = 4)
# Flatten -----------------------------------------------------------------
# Shape Subset for Current Dollars, ignore rest
df <- df.raw[2:10, -2:-3]
View(df)
# Flatten
df.flat <- gather(df, Fiscal.Year, Amount, -1)
# Fixing ------------------------------------------------------------------
# Dollars in millions
df.flat$Amount <- df.flat$Amount * 1e6
# Remove trailing dots (non-alphanumeric)
df.flat$`Public Law Title` <- str_trim(gsub("[0-9.]+", "", df.flat$`Public Law Title`))
df.flat
# Remove 'FY' from Fiscal.Year column
df.flat <- separate(df.flat, Fiscal.Year, c('trash', 'FY'), convert = TRUE )
df.flat <- df.flat[,-2]
df.flat$Deflator.Type <- "Current.Dollars"
df.flat$Source <- "Table 6.8 DOD BA By Title"
# Export ------------------------------------------------------------------
# Filename
mylocation <- "./Data/Processed"
myfilename <- "tbl6.8_DOD.BA.By.Title"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
write_csv(df.flat, my.file)
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
filename <- "../Data/Raw/FY17 6-8_DoD BA by Title.xlsx"
#excel_sheets(filename)
df.raw <- read_excel(filename, skip = 4)
# Flatten -----------------------------------------------------------------
# Shape Subset for Current Dollars, ignore rest
df <- df.raw[2:10, -2:-3]
View(df)
# Flatten
df.flat <- gather(df, Fiscal.Year, Amount, -1)
# Fixing ------------------------------------------------------------------
# Dollars in millions
df.flat$Amount <- df.flat$Amount * 1e6
# Remove trailing dots (non-alphanumeric)
df.flat$`Public Law Title` <- str_trim(gsub("[0-9.]+", "", df.flat$`Public Law Title`))
df.flat
# Remove 'FY' from Fiscal.Year column
df.flat <- separate(df.flat, Fiscal.Year, c('trash', 'FY'), convert = TRUE )
df.flat <- df.flat[,-2]
df.flat$Deflator.Type <- "Current.Dollars"
df.flat$Source <- "Table 6.8 DOD BA By Title"
# Export ------------------------------------------------------------------
# Filename
mylocation <- "./Data/Processed"
myfilename <- "tbl6.8_DOD.BA.By.Title"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
write_csv(df.flat, my.file)
mylocation <- "../Data/Processed"
myfilename <- "tbl6.8_DOD.BA.By.Title"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
write_csv(df.flat, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' Table 6.8 DOD BA By Title
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
# Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 6-8_DoD BA by Title.xlsx"
#excel_sheets(filename)
df.raw <- read_excel(filename, skip = 4)
# Flatten -----------------------------------------------------------------
# Shape Subset for Current Dollars, ignore rest
df <- df.raw[2:10, -2:-3]
View(df)
# Flatten
df.flat <- gather(df, Fiscal.Year, Amount, -1)
# Fixing ------------------------------------------------------------------
# Dollars in millions
df.flat$Amount <- df.flat$Amount * 1e6
# Remove trailing dots (non-alphanumeric)
df.flat$`Public Law Title` <- str_trim(gsub("[0-9.]+", "", df.flat$`Public Law Title`))
# Remove 'FY' from Fiscal.Year column
df.flat <- separate(df.flat, Fiscal.Year, c('trash', 'FY'), convert = TRUE )
df.flat <- df.flat[,-2]
df.flat$Deflator.Type <- "Current.Dollars"
df.flat$Source <- "Table 6.8 DOD BA By Title"
# Export ------------------------------------------------------------------
# Filename
mylocation <- "../Data/Processed"
myfilename <- "tbl.6.8_DOD.BA.By.Title"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
write_csv(df.flat, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' #' Table 5-6: DoD dod.deflators Budget Authority by Public Law
#' Title (FY 1970 to FY 2021)
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(zoo)
library(stringr)
library(readr)
library(ggplot2)
#' # Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 PB Green Book Chap 5.xlsx"
# Examine file
#excel_sheets(filename)[6]
# Import tbl 5-5 on sheet 6 of workbook
dod.deflator <- tbl_df(read_excel(path = filename, sheet = 6, skip = 4))
# Make all colnames r-friendly
colnames(dod.deflator) <- make.names(colnames(dod.deflator))
# Add Columns -------------------------------------------------------------
# Change FY column name
colnames(dod.deflator)[1] <- "FY"
# New Column: dod.deflator Name
dod.deflator$Source <- names(read_excel(path = filename, sheet = 6))[1]
# New Column: dod.deflator Base Year
dod.deflator$Base.FY <- 2017
# Clean and Tidy -------------------------------------------------------------------
# Remove dots from FY column and convert to numeric
dod.deflator$FY <- as.numeric(str_trim(gsub("[.]+", "", dod.deflator$FY)))
# Tidy
dod.deflator <- dod.deflator %>%
gather(key = Public.Law.Title, dod.deflator.Value, -FY, -Source, -Base.FY)
# Complete and Export as .csv -----------------------------------------------------
# Filename
mylocation <- "../Data/Processed"
myfilename <- "tbl.5.6_DOD.Deflators.BA.by.Public.Law"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
write_csv(dod.deflator, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' #' Table 5-1: Department of Defense and Selected Economy-Wide Indices
#' (1970-2021)
#' Base Year = 2017
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(zoo)
library(stringr)
library(readr)
library(ggplot2)
library(readr)
#' # Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 PB Green Book Chap 5.xlsx"
# Examine Workbook before importing
#excel_sheets(filename)[1]
# Import tbl 5-1 on sheet 1 of workbook
econ.deflator <- read_excel(path = filename, sheet = 1, skip = 3)
# Cleaning and Shaping ----------------------------------------------------------------
# Shaping
# Make all colnames r-friendly
colnames(econ.deflator) <- make.names(colnames(econ.deflator))
# Shape the Width: Select Columns to use
econ.deflator <- econ.deflator %>%
select(Fiscal.Year, Gross.Domestic.Product1,Consumer.Price.Index..CPI.W.2,Dept.of.Defense.Non.Pay, Dept.of.Defense.Purchases3, Total.Department.of.Defense)
# Shape the Length: omit bottom notes (save notes for later)
# Save Notes
econ.deflator.notes <- econ.deflator[54:56,1]
# Cut off bottom rows
econ.deflator <- econ.deflator[1:52,]
# Convert to Table df
econ.deflator <- tbl_df(econ.deflator)
# Clean: FY Column
# Remove dots and spaces, convert to numeric
econ.deflator$Fiscal.Year <- as.numeric(str_replace_all(econ.deflator$Fiscal.Year, "[ ,.]", ""))
# Rename FY with dplyr! Awesome. (note..the new variable precedes the old one)
econ.deflator <- rename(econ.deflator, FY = Fiscal.Year)
# Add 'No Deflator' Column
econ.deflator$No.Deflator <- 1
# Gather and Tidy
econ.deflator <- gather(econ.deflator, econ.deflator.name, econ.deflator.value, -FY)
# Add MetaData ------------------------------------------------------------
# Add Base year column and source
econ.deflator$Deflator.Base.Year <- 2017
econ.deflator$Deflator.Source <- "Table 5-1: Department of Defense and Selected Economy-Wide Indices"
# Assign Notes
econ.deflator <- econ.deflator %>%
mutate(Deflator.Notes = ifelse(grepl("Gross.Domestic.Product1", econ.deflator$econ.deflator.name), yes = as.character(econ.deflator.notes[1,1]),
ifelse(grepl("Consumer.Price.Index..CPI.W.2", econ.deflator.name), yes = as.character(econ.deflator.notes[2,1]),
ifelse(grepl("Dept.of.Defense.Purchases3", econ.deflator.name), yes = as.character(econ.deflator.notes[3,1]), no = "None"))))
# Remove numbers the name column
econ.deflator$econ.deflator.name <- str_replace_all(econ.deflator$econ.deflator.name, "[0-9]", "")
# Correct CPI variable
econ.deflator$econ.deflator.name<- gsub(pattern = "Consumer.Price.Index..CPI.W.", replacement = "Consumer.Price.Index.CPI.W", x = econ.deflator$econ.deflator.name)
# Export as .csv ------------------------------------------------------------------
# Filename
mylocation <- "../Data/Processed"
myfilename <- "tbl.5.1_Deflators.Economy.Wide"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
write_csv(econ.deflator, my.file)
#' Original DoD Comptroller zip file downloaded here:
#' http://comptroller.defense.gov/BudgetMaterials.aspx
#' To View as pd:
#' http://comptroller.defense.gov/Portals/45/Documents/defbudget/fy2017/FY17_Green_Book.pdf
#'
#' Table 2.1 Base Budget, War Funding and Supplementals by Military Department, by P.L. Title
#' (Discretionary Budget Authority)
#'
# Libraries ---------------------------------------------------------------
library(tidyr)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(zoo)
# Import  Data ------------------------------------------------------------
# Create filename for import purposes
# Note: Data is unzipped and stored in a Data/Raw subfolder as an Excel doc
filename <- "../Data/Raw/FY17 PB Green Book Chap 2.xlsx"
#Import  There are 15 sheets but only the first 14 have data. The last is for notes.
t <-  lapply(excel_sheets(filename)[1:14], read_excel, path = filename, col_names = F, skip = 5 )
#' User Defined Cleaning Function ---------------------------------------------------
#' Purpose:Create function that cleans and tidies
#' Note: Rather than removing cols, SELECT them by colname. Sometimes, one sheet will
#' have extra blank cols not included on others that widens orlengthens the array.
tidy_grnbook_supps_table <- function(t){
# Deprecated: Remove 5 rows at top of each sheet using read_excel 'skip' argument
# t <- (t[-1:-5,])
# Create Missing Colnames
t[1, 1:3] <- c("Military.Department", "FY", "Account")
# Set all Colnames and remove extra row (there ought to be a function that does this)
colnames(t) <- t[1,]
t <- t[-1,]
# Make all colnames r-friendly
colnames(t) <- make.names(colnames(t))
# Select (don't omit!) Columns to use
t <- t[, c(1:3, 5:11)]
# Forward Fill for first two columns (Military Dept, and FY)
t[,c('Military.Department', 'FY')] <- na.locf(t[,c('Military.Department', 'FY')])
# DANGER! Remove rows that contain a NA in the Public Law Title column
t <- t[complete.cases(t$Account),]
# Remove non-alphabetic characters from Public.Law.Title column numbers and periods
t$Account <- str_trim(gsub("[0-9.]+", "", t$Account))
# Remove 'continued' from Military Department
t$Military.Department <- str_trim(gsub("(Continued)", "", t$Military.Department, fixed = "True"))
# Convert relevant cols to numeric
t$FY <- as.numeric(gsub("FY ", "", t$FY))
# Gather and Tidy
t <- gather(t, Public.Law.Title, Amount, c(-1:-3))
# Convert Amount to numeric
t$Amount <- as.numeric(t$Amount)
# There are NAs and 0 values mingled in Amount column. Change them all to 0
t[is.na(t)] <- 0
# This dataset was originally adjusted to be "in millions." Mulitply for unadjusted amount
t$Amount <- t$Amount * 1e6
##### PreCalculated Totals ####
#' The original dataset contains hard-coded totals which do not match real calculated totals
#' should be removed but can be useful for checking the accuracy of this script:
# Remove precalculated totals but save the subset for future use
# Save Totals Subset - This doesn't seem to work outside of the function
#precalculated_totals <- t %>%
# filter(grepl("total", t$Military.Department, ignore.case = T))
# Remove  published "Totals" Column
# Note: Published totals are consistently $1-2 million off from caluclated totals
# For more info, see checksums script
t <- t %>%
filter(!grepl("total", t$Military.Department, ignore.case = T))
return(t)
}
# Tidy data new function -------------------------------------------------
t <- lapply(X = t, FUN = tidy_grnbook_supps_table)
t <- do.call(rbind, t)
# Note: this could be done with purr's map, as well
# Add MetaData ------------------------------------------------------------
# Add Spending type column I've devised (base, OCO, emergency relief, other)
# Create variables
unique.public.laws <- unique(t$Account)
base <- unique.public.laws[1]
OCO.GWOT <- unique.public.laws[c(2,8)]
emergency.relief <- unique.public.laws[c(4,5,6,9,10,12)]
other <- unique.public.laws[c(3,7,11)]
# Assign vars to column
t <- t %>%
mutate(spending.type = ifelse(t$Account %in% base, "Base, Discretionary",
ifelse(t$Account %in% OCO.GWOT, "OCO.GWOT",
ifelse(t$Account %in% emergency.relief, "Emergency Relief",
ifelse(t$Account %in% other, "Other Discretionary", "uncategorized")))))
# Include Source Column
t$Source_Data <- "FY17 Green Book, tbl 2.1"
# Export ------------------------------------------------------------------
# Export as .csv
# Filename
mylocation <- "../Data/Processed"
myfilename <- "tbl.2.1_Base.and.Supps"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.file <- sprintf("%s/%s_%s.csv", mylocation, myfilename, mydate)
# Export
# View(t)
write_csv(t, my.file)
