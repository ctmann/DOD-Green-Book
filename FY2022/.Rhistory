video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
```
---
title: "Tomo Youtube Videos"
output: html_document
---
```{r mylibraries, include = FALSE}
library(xsitemap)
library(tidyverse)
library(clipr)
library(DT)
library(lubridate)
library(tuber)
```
```{r getdata, include=FALSE}
x <- xsitemapGet("https://tomovhxtv.vhx.tv/sitemap.xml")%>%
slice(10:n() ) %>%
mutate(my.basename  = str_remove(loc, "https://tomovhxtv.vhx.tv/")) %>%
separate(my.basename,
into=c("series", "trashme", "title"),
sep="/") %>%
mutate(title = str_replace_na(title, "landing.page") ) %>%
# sortingid
group_by(series) %>% mutate(series.sort.id = row_number() ) %>% ungroup() %>%
# updated
mutate(year =  as.integer(format(lastmod, " %Y")),
month = as.integer(format(lastmod, "%m")),
day =  lastmod ) %>%
# Make hyperlink Live #
mutate(
title = paste0("<a href = ",'"', loc, '">',title, "</a>") ) %>%
# datemath
select(id = series.sort.id,
year, month, day,
series = series,
title)
```
```{r dataupdatetable, include=FALSE}
x.last.30.days <-
xsitemapGet("https://tomovhxtv.vhx.tv/sitemap.xml")%>%
slice(10:n() ) %>%
mutate(my.basename  = str_remove(loc, "https://tomovhxtv.vhx.tv/")) %>%
separate(my.basename,
into=c("series", "trashme", "title"),
sep="/") %>%
mutate(title = str_replace_na(title, "landing.page") ) %>%
# sortingid
group_by(series) %>% mutate(series.sort.id = row_number() ) %>% ungroup() %>%
# Dating
mutate(date.math = as.integer(interval(lastmod, Sys.Date() ) %/% days() )) %>%
filter(date.math<31) %>%
# Make hyperlink Live #
mutate(
title = paste0("<a href = ",'"', loc, '">',title, "</a>") ) %>%
#Selection
select(id = series.sort.id,
updated = lastmod,
days = date.math,
series = series,
title)
```
## Last 30 Days
```{r printlast30days, echo=FALSE, warning=FALSE, message = FALSE}
x.last.30.days %>%
filter(!(series %in% "forums")) %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
columnDefs = list(list(width = '5%',
targets = c(0,1,2) ) ),
columnDefs = list(list(width = '32%',
targets = c( 3,4) ) ),
columnDefs = list(list(width = '50%',
targets = c( 5) ) ),
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE,
)
```
## Main Table
```{r print.main.data.table, echo=FALSE, warning=FALSE, message = FALSE}
x %>%
filter(!(series %in% "forums")) %>%
## Tableformatting ##
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
columnDefs = list(list(width = '5%',
targets = c(0,1,2,3) ) ),
columnDefs = list(list(width = '30%',
targets = c( 5) ) ),
columnDefs = list(list(width = '55%',
targets = c( 6) ) ),
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE,
)
```
## Youtube Table
{r print.youtube.table, echo=FALSE, warning=FALSE, message = FALSE}
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
```
library(tuber)
library(tidyverse)
library(lubridate)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
library(tuber)
library(tidyverse)
library(lubridate)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
library(tuber)
library(tidyverse)
library(lubridate)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
library(tuber)
library(tidyverse)
library(lubridate)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
library(tuber)
library(tidyverse)
library(lubridate)
library(DT)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
library(tuber)
library(tidyverse)
library(lubridate)
library(DT)
app_id <- "620108498825-co929vgrgcolidu59d7fn4c28pam98ot.apps.googleusercontent.com"
app_secret <- "cuTL51lPAv02Bc1a5Qyan4cw"
yt_oauth(app_id = app_id, app_secret = app_secret, token = "")
# use the youtube oauth
yt_oauth(app_id = client_id,
app_secret = client_secret,
token = '')
tomo.id <- "UCe2OJ09kz2MEl6k4nsCMP6Q"
videos <- yt_search(term="", type="video", channel_id = tomo.id) %>%
mutate_if(is.factor, as.character) %>%  as_tibble() %>%
mutate(date = as.Date(publishedAt),
hyperlink = str_c("https://www.youtube.com/watch?v=",
video_id),
title =  paste0("<a href = ",'"', hyperlink, '">',title, "</a>"),
source = "youtube") %>%
mutate(date.math = as.integer(interval(date, Sys.Date() ) %/% days() ) ) %>%
select(source, date.math, date,  title ) %>%
arrange(desc(date))
videos %>%
datatable(filter = 'top',
rownames=FALSE,
extensions = 'FixedColumns',
options = list(
fixedColumns = TRUE,
pageLength = 1000,
autoWidth = TRUE),
escape = FALSE
)
#' Public Law Title from 1948
#' Includes discretionary and mandatory
#'
#' 6.01 TOA
#' 6.08 BA
#' 6.11 Outlays
#'
# How to Update this File -------------------------------------------------
#' #-#-#-#-#-#-# THIS WILL PROBABLY NOT CHANGE #-#-#-#-#-#-#-#-#-#-#-#-#-#
#'
#'   Download Comptroller data to Raw folder (manually).
#'
#'   Set working Directory to current year:
setwd("./DOD-Green-Book/FY2022")
#'
#'   Chapter 6 raw data folder, files
chapter.6.raw.data.folder <- "./Data/Raw/FY22 PB Green Book Chap 6/"
#'
#'  Identify rows for constant and current
row.range <- c( 7:16,    #<- Current
19:28)    #<- Constant
row.names <-  rep(c( "military.personnel",
"retired.pay.Defense",
"OM",
"procurement",
"RDTE",
"MILCON",
"family.housing",
"revolving.and.management.funds",
"trust.receipts.and.other"), 2)
#' #-#-#-#-#-#-# THIS WILL PROBABLY NOT CHANGE #-#-#-#-#-#-#-#-#-#-#-#-#-#
#'
#'   Download Comptroller data to Raw folder (manually).
#'
#'   Set working Directory to current year:
setwd("./DOD-Green-Book/FY2022")
#'
#'   Chapter 6 raw data folder, files
chapter.6.raw.data.folder <- "./Data/Raw/FY22 PB Green Book Chap 6/"
#'
#'  Identify rows for constant and current
row.range <- c( 7:15,    #<- Current
18:26)    #<- Constant
row.names <-  rep(c( "military.personnel",
"retired.pay.Defense",
"OM",
"procurement",
"RDTE",
"MILCON",
"family.housing",
"revolving.and.management.funds",
"trust.receipts.and.other"), 2)
#' Public Law Title from 1948
#' Includes discretionary and mandatory
#'
#' 6.01 TOA
#' 6.08 BA
#' 6.11 Outlays
#'
# How to Update this File -------------------------------------------------
#' #-#-#-#-#-#-# THIS WILL PROBABLY NOT CHANGE #-#-#-#-#-#-#-#-#-#-#-#-#-#
#'
#'   Download Comptroller data to Raw folder (manually).
#'
#'   Set working Directory to current year:
setwd("./DOD-Green-Book/FY2022")
#'
#'   Chapter 6 raw data folder, files
chapter.6.raw.data.folder <- "./Data/Raw/FY22 PB Green Book Chap 6/"
#'
#'  Identify rows for constant and current
row.range <- c( 7:15,    #<- Current
18:26)    #<- Constant
row.names <-  rep(c( "military.personnel",
"retired.pay.Defense",
"OM",
"procurement",
"RDTE",
"MILCON",
"family.housing",
"revolving.and.management.funds",
"trust.receipts.and.other"), 2)
#' name of first column
first.col.name <- "public.law.title"
#'  Preferred Export filename
export.filename <- "1_Public.Law.since.1948_BA.Outlays.TOA"
#' #-#-#-#-#-#-# Indvidual File Info May Change #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#'       Update Name of specific files
my.filename.1 <- "FY22 PB Green Book Table 6-1.xlsx" #<--  TOA by public law
my.filename.2 <- "FY22 PB Green Book Table 6-8.xlsx" #<--  BA by public law
my.filename.3 <- "FY22 PB Green Book Table 6-11.xlsx" #<-- Outlays by public law
#'       Update Name of specific files
budget.type.1        <-     "TOA"
budget.type.2        <-     "BA"
budget.type.3        <-     "Outlays"
#'       Update Name of specific files
source.table.1       <-     "tbl.6.01.TOA.by.Public.Law"
source.table.2       <-     "tbl.6.08.BA.by.Public.Law"
source.table.3       <-     "tbl.6.11.Outlays.by.Public.Law"
# Libraries ---------------------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
# Superfunction -----------------------------------------------------------
clean.function <- function(
my.filename,      #<- changes
source.table,     #<- changes
budget.type,      #<- changes
intro.col.name = first.col.name,
folder = chapter.6.raw.data.folder,
valid.row.range = row.range,
valid.row.names = row.names) {
# Import -------------------------------------------------------------
# construct filename
import.file.name <- paste0(chapter.6.raw.data.folder,
my.filename)
#Import
df.1 <- read_excel(import.file.name, col_names=F)
# Reshaping ---------------------------------------------------------------
#Basic Shaping: Only valid Row, cols
df.1 <- df.1[valid.row.range,c(-2:-3)]
# FY Colnames (based on size of dataset--brittle)
FY.colnames <- str_c(1948:(1948+(ncol(df.1)-2) )) #<FY must be text (for tidy)
colnames(df.1) <- c(intro.col.name,     #<First colname
FY.colnames)
# Rename left col (header rows)
df.1[,1] <- valid.row.names
# NAs to zeros
df.1[is.na(df.1)] <- "0"
#Add meta cols-#-#-#-#-#-#-#--#-#-#--#-#-#-
#new identifying cols
df.1$source.table       <-     source.table
df.1$budget.type        <-     budget.type
#Current/Constant
# Divide nrows in two; tag first half as "current", and second "constant"
repeat.deflator.type.times <- nrow(df.1)/2
repeat.deflator.type <- c( rep("current", repeat.deflator.type.times),
rep("constant", repeat.deflator.type.times) )
df.1$deflator.type <-repeat.deflator.type
#Rearrange
df.1 <- df.1 %>%
select(
source.table,
budget.type,
deflator.type,
1,
everything() )
#Tidy and formatting-#-#-#-#-#-#-#--#-#-#--#-#-#-
#Gather
df.2 <- df.1 %>%
gather(FY, amount, -1:-4)
#adjust numbers
df.2$amount <- as.numeric(df.2$amount)*1e6
final.df <- df.2
return(final.df)
}
# Export as .csv -----------------------------------------------------
combined <- bind_rows(
#tbl 6-2 TOA
clean.function(my.filename  = my.filename.1,
source.table = source.table.1,
budget.type  = budget.type.1),
#tbl 6-9 BA
clean.function(my.filename  = my.filename.2,
source.table = source.table.2,
budget.type  = budget.type.2),
#tbl 6-12 Outlays
clean.function(my.filename  = my.filename.3,
source.table = source.table.3,
budget.type  = budget.type.3)
)
# Export
mylocation <- "./Data/Processed"
mydate <- paste('Updated', format(Sys.time(), format = "_%Y-%m-%d_%H%M") , sep = "")
my.export.filename <- sprintf("%s/%s_%s.csv", mylocation, export.filename, mydate)
write_csv(combined, my.export.filename)
